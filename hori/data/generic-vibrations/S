(dp0
S'path'
p1
S'/a/suncatfs1/u1/jvarley/calculations/adsorbates/S_on_Cu/ML1_3/S/IX-vibrations/FREE-try2'
p2
sS'remark'
p3
NsS'vibrations'
p4
cnumpy.core.multiarray
_reconstruct
p5
(cnumpy
ndarray
p6
(I0
tp7
S'b'
p8
tp9
Rp10
(I1
(I3
tp11
cnumpy
dtype
p12
(S'c16'
p13
I0
I1
tp14
Rp15
(I3
S'<'
p16
NNNI-1
I-1
I0
tp17
bI00
S'\xab\xc0\xa5\x8bK_\x92?\x00\x00\x00\x00\x00\x00\x00\x00&\xdf\x99\xe3X\xd8\x98?\x00\x00\x00\x00\x00\x00\x00\x00\xe8\xf9x]\x8f\xf1\x9d?\x00\x00\x00\x00\x00\x00\x00\x00'
p18
tp19
bsS'calculation script'
p20
S"#!/usr/bin/env python\n\n#LSF -q suncat-long\n#LSF -n 16\n#LSF -o std.out\n#LSF -e std.err\n#LSF -N\n\nfrom ase import *\nimport numpy as np\nfrom numpy.linalg import *\nfrom numpy import sqrt, pi\nfrom numpy import arctan as atan\nfrom ase.io import *\nfrom ase.visualize import view\nfrom ase.lattice.cubic import FaceCenteredCubic\nfrom ase.constraints import FixAtoms\nfrom ase.calculators.jacapo import Jacapo\nfrom ase.optimize import QuasiNewton\nfrom ase.data import covalent_radii, atomic_numbers\nfrom ase.vibrations import *\n\nslab = read('./slab.traj')\n\nslab.set_constraint(constraint=FixAtoms(indices=range(27)))\n# Set spin-polarization\nspinpol = False\n\ncalc = Jacapo(nc='out.nc', #nc output file\n              pw=340.15, #planewave cutoff\n              dw=500.00, #density cutoff\n              nbands=None, # number of bands\n              kpts=(4,4,1), # k points\n              xc='RPBE', #exchange correlation method\n              ft=0.1, #Fermi temperature\n              symmetry=False,\n              dipole={'status':True,\n                      'mixpar':0.2,\n                      'initval':0.0,\n                     },\n              ncoutput={'wf':'No',\n                        'cd':'No',\n                        'efp':'No',\n                        'esp':'Yes'},\n              convergence={'energy':0.00001,\n                           'density':0.0001,\n                           'occupation':0.001,\n                           'maxsteps':None,\n                           'maxtime':None},\n              spinpol=spinpol,\n              stay_alive=True,\n             )\n\nslab.set_calculator(calc)\n\nvib = Vibrations(slab,indices=[27])\nvib.run()\nvib.summary()\n\nvib_energies = vib.get_energies()\nf = open('out.vib_energy','w')\nf.write(str(vib_energies))\nf.close()\n"
p21
sS'author'
p22
S'jvarley'
p23
s.