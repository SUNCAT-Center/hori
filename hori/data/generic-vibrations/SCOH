(dp0
S'path'
p1
S'/a/suncatfs1/u1/jvarley/calculations/adsorbates/S_on_Cu/ML1_3/SCOH/IIIX/config+x+z/VIBRATIONS'
p2
sS'remark'
p3
S'H is bonded to C'
p4
sS'vibrations'
p5
cnumpy.core.multiarray
_reconstruct
p6
(cnumpy
ndarray
p7
(I0
tp8
S'b'
p9
tp10
Rp11
(I1
(I12
tp12
cnumpy
dtype
p13
(S'c16'
p14
I0
I1
tp15
Rp16
(I3
S'<'
p17
NNNI-1
I-1
I0
tp18
bI00
S'\x00\x00\x00\x00\x00\x00\x00\x00{\xb0\xe2$N\xfd\x80?\x15a\x08+\xd7[\x80?\x00\x00\x00\x00\x00\x00\x00\x00%\x86\xc8\xd0\xef\x89\x90?\x00\x00\x00\x00\x00\x00\x00\x00D\x96\x88\xa7~f\x97?\x00\x00\x00\x00\x00\x00\x00\x00M\xc2A\x1a\xad\xed\x9a?\x00\x00\x00\x00\x00\x00\x00\x00\x92*\x1dk7-\x9d?\x00\x00\x00\x00\x00\x00\x00\x00R\xf8aKk/\xb0?\x00\x00\x00\x00\x00\x00\x00\x00\x9e\xaf\xbb\x98\xbd\xa3\xb8?\x00\x00\x00\x00\x00\x00\x00\x00]7~dip\xbb?\x00\x00\x00\x00\x00\x00\x00\x00\xd4M\x01\xe4\x16\xa1\xc4?\x00\x00\x00\x00\x00\x00\x00\x00>\x98N\x93N|\xc8?\x00\x00\x00\x00\x00\x00\x00\x00\xb7\xed\x12\x8el\xab\xd7?\x00\x00\x00\x00\x00\x00\x00\x00'
p19
tp20
bsS'calculation script'
p21
S"#!/usr/bin/env python\n\n#LSF -q suncat-long\n#LSF -n 16\n#LSF -o std.out\n#LSF -e std.err\n#LSF -N\n\nfrom ase import *\nimport numpy as np\nfrom numpy.linalg import *\nfrom numpy import sqrt, pi\nfrom numpy import arctan as atan\nfrom ase.io import *\nfrom ase.visualize import view\nfrom ase.lattice.cubic import FaceCenteredCubic\nfrom ase.constraints import FixAtoms\nfrom ase.data.molecules import molecule as molecule\nfrom ase.calculators.jacapo import Jacapo\nfrom ase.optimize import QuasiNewton\nfrom ase.data import covalent_radii, atomic_numbers\nfrom ase.vibrations import *\n\ntry:\n    slab = read('1ML_S.traj')\nexcept:\n    slab = read('../1ML_S.traj')\n\nslab.rattle()\n# Set spin-polarization\nspinpol = False\ncalc = Jacapo(nc='out.nc', #nc output file\n              pw=340.15, #planewave cutoff\n              dw=500.00, #density cutoff\n              nbands=None, # number of bands\n              kpts=(4,4,1), # k points\n              xc='RPBE', #exchange correlation method\n              ft=0.1, #Fermi temperature\n              symmetry=False,\n              dipole={'status':True,\n                      'mixpar':0.2,\n                      'initval':0.0,\n                     },\n              ncoutput={'wf':'No',\n                        'cd':'No',\n                        'efp':'No',\n                        'esp':'Yes'},\n              convergence={'energy':0.00001,\n                           'density':0.0001,\n                           'occupation':0.001,\n                           'maxsteps':None,\n                           'maxtime':None},\n              spinpol=spinpol,\n              stay_alive=True,\n             )\n\nslab.set_calculator(calc)\n\ndyn = QuasiNewton(slab, logfile='1ML_S_ads.log', trajectory='1ML_S_ads.traj')\ndyn.run(fmax=0.05)\n\nenergy = slab.get_potential_energy()\n\nf = open('out.energy','w')\nf.write(str(energy))\nf.close()\n\n\nvib = Vibrations(slab,indices=[27,28,29,30])\nvib.run()\nvib.summary()\n\nvib_energies = vib.get_energies()\n"
p22
sS'author'
p23
S'jvarley'
p24
s.