(dp0
S'path'
p1
S'/home/camp/anpet/develop/20100519_vibrations_rotateproblem/jacapo-tolerance/unrotated-densitytolerance8'
p2
sS'remark'
p3
S'WARNING: CHO vibrations calculated on 1-layer Cu slab.'
p4
sS'vibrations'
p5
cnumpy.core.multiarray
_reconstruct
p6
(cnumpy
ndarray
p7
(I0
tp8
S'b'
p9
tp10
Rp11
(I1
(I9
tp12
cnumpy
dtype
p13
(S'c16'
p14
I0
I1
tp15
Rp16
(I3
S'<'
p17
NNNI-1
I-1
I0
tp18
bI00
S'>V>\xd47\xea{?\x00\x00\x00\x00\x00\x00\x00\x00\x83$<\xa0\x7f\x14\x85?\x00\x00\x00\x00\x00\x00\x00\x00K\xcc\x87\x0cQ\xc7\x98?\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x89\x1e9\x905\x9b?\x00\x00\x00\x00\x00\x00\x00\x00yn\xcc\xba\xef\x01\xa9?\x00\x00\x00\x00\x00\x00\x00\x00\xc0h\xb9\xc1-\xe9\xb2?\x00\x00\x00\x00\x00\x00\x00\x00\xe2\xd45(\xce\xfd\xc2?\x00\x00\x00\x00\x00\x00\x00\x00\x17\xd3\xca\xebw~\xca?\x00\x00\x00\x00\x00\x00\x00\x00W9Ui,\x0e\xd6?\x00\x00\x00\x00\x00\x00\x00\x00'
p19
tp20
bsS'calculation script'
p21
S"#!/usr/bin/env python\n#PBS -q medium\n#PBS -r n\n#PBS -l nodes=1:ppn=8\n#PBS -m a\n#PBS -M andypeterson@gmail.com\n#PBS -V\n\nimport sys\nsys.path[1] = '../../myase/'\n\nimport pickle\nfrom numpy import array\nfrom ase import read,view,FixAtoms,EMT,QuasiNewton\nfrom ase.calculators.jacapo import Jacapo\nfrom ase.vibrations import Vibrations\nfrom personal.ase import ParOpenCloseFile\n\natoms = read('../input.traj')\n\n# The free atoms in the vibrational analysis\nvibrateatoms = [0,1,2]\n\n# Constrain the slab\nmask = [atom.tag==1 for atom in atoms]\natoms.set_constraint(FixAtoms(mask=mask))\n\n# Set the calculator\ncalc = Jacapo(nc='new.nc', #nc output file\n              pw=340.15, #planewave cutoff\n              dw=500.00, #density cutoff\n              nbands=None, # number of bands\n              kpts=(4,4,1), # k points\n              xc='RPBE', #exchange correlation method\n              ft=0.1, #Fermi temperature\n              symmetry=True,\n              dipole=True,\n              spinpol=False,\n              stay_alive=True\n             )\ncalc.set_convergence(density=0.00000001)\ncalc.set_dipole(status=True, mixpar=0.2, initval=0.0)\ncalc.set_ncoutput(wf='No',cd='No',efp='No',esp='No')\natoms.set_calculator(calc)\n\nenergy = atoms.get_potential_energy()\nprint energy\n\ndyn = QuasiNewton(atoms,logfile='qn.log',trajectory='qn.traj')\ndyn.run(fmax=0.05)\n\nenergy = atoms.get_potential_energy()\nprint energy\n\n\n# Calculate vibrations\nvib = Vibrations(atoms,indices=vibrateatoms)\nvib.run()\nvib.summary(method='standard')\n\n# Make trajectory files to visualize the modes.\nfor mode in range(len(vibrateatoms)*3):\n    vib.write_mode(mode)\n\n\n"
p22
sS'author'
p23
S'AAP'
p24
s.