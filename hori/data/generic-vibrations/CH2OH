(dp0
S'path'
p1
S'/a/suncatfs1/u1/aap/niflheim/anpet/20091105_adsorbate_vibrations/kpts-441/CH2OH/Cu'
p2
sS'remark'
p3
NsS'vibrations'
p4
cnumpy.core.multiarray
_reconstruct
p5
(cnumpy
ndarray
p6
(I0
tp7
S'b'
p8
tp9
Rp10
(I1
(I15
tp11
cnumpy
dtype
p12
(S'c16'
p13
I0
I1
tp14
Rp15
(I3
S'<'
p16
NNNI-1
I-1
I0
tp17
bI00
S'<\xbe\x1fB\x19[s?\x00\x00\x00\x00\x00\x00\x00\x00\x15\xd4\x88\xfc\x15;\x82?\x00\x00\x00\x00\x00\x00\x00\x00"\'qz\x92\xd6\x96?\x00\x00\x00\x00\x00\x00\x00\x00\x9f\x16.\xa1\xe9V\x9c?\x00\x00\x00\x00\x00\x00\x00\x00\xc9\xb9K\x8f\xc2\x91\xa5?\x00\x00\x00\x00\x00\x00\x00\x00\x8f]P\xd9\x8a!\xa8?\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x9c\xc4E\x8cc\xb0?\x00\x00\x00\x00\x00\x00\x00\x00r\xfc\xee\xb1\x08\xd1\xbe?\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x8bL&\xbdO\xc1?\x00\x00\x00\x00\x00\x00\x00\x00\xfe\xd8\xdf_z\xb6\xc2?\x00\x00\x00\x00\x00\x00\x00\x00;\xd2\xffZ\x8d\xa5\xc4?\x00\x00\x00\x00\x00\x00\x00\x00t\x1a;"\x01n\xc6?\x00\x00\x00\x00\x00\x00\x00\x00\x01\xb2\xc4\xe6\xc6\xf8\xd5?\x00\x00\x00\x00\x00\x00\x00\x00^\x9fw\xbeJ\x1c\xd8?\x00\x00\x00\x00\x00\x00\x00\x00\x1c\xf4\x93\'\x10\x99\xdd?\x00\x00\x00\x00\x00\x00\x00\x00'
p18
tp19
bsS'calculation script'
p20
S'#!/usr/bin/env python\n\n#PBS -q verylong\n#PBS -r n\n#PBS -l nodes=1:ppn=8\n#PBS -m a\n#PBS -M andypeterson@gmail.com\n#PBS -V\n\nfrom ase import *\nfrom ase.calculators.jacapo import Jacapo\nfrom ase.vibrations import Vibrations\n\nfrom personal.ase import perturbfreeatoms\n\n\nname = "Cu_CH2OH"\nvibrateatoms = [0,1,2,3,4]\nfreeatoms = [0,1,2,3,4,5,6,7,8,9,10,11,12,13] # For optimization calculation\n\n# Open the optimized slab with adsorbate from an old simulation.\n\nslab = read(\'/home/camp/anpet/20091105_adsorbate_vibrations/traj_from_Frank/traj_CH2OH.nc\')\n\n# Fix the atoms to not be optimized, give the rest random perturbations\n# to break any artificial symmetry.\nmask = [True for atom in slab] # all fixed\nfor free in freeatoms: # free atoms for optimizer\n    mask[free] = False\nslab.set_constraint(FixAtoms(mask=mask))\n\nperturbfreeatoms(atoms=slab,max=0.05)\n\ncalc = Jacapo(nc=name + \'.nc\', #nc output file\n                 pw=340.15, #planewave cutoff\n                 dw=500.00, #density cutoff\n                 nbands=None, # number of bands\n                 kpts=(4,4,1), # k points\n                 xc=\'RPBE\', #exchange correlation method\n                 ft=0.1, #Fermi temperature\n                 symmetry=True,\n                 dipole=True,\n                 spinpol=False,\n                 stay_alive=True\n                )\ncalc.set_convergence()\ncalc.set_dipole(status=True, mixpar=0.2, initval=0.0)\ncalc.set_psp(sym=\'Pb\',psp=\'/home/camp/anpet/common/uspp/pb_ps.uspp\')\n\nslab.set_calculator(calc)\n\ndyn = QuasiNewton(slab,logfile=\'out.log\',trajectory=\'out.traj\')\ndyn.run(fmax=0.05)\n\ne_adsorbed = slab.get_potential_energy()\nprint e_adsorbed\n\nf = open(name + \'.energy\',\'w\')\nf.write(str(e_adsorbed))\nf.close()\n\n\n# Calculate vibrations\nvib = Vibrations(slab,indices=vibrateatoms)\nvib.run()\nvib.summary(method=\'standard\')\n\n# Make trajectory files to visualize the modes.\nfor mode in range(len(vibrateatoms)*3):\n    vib.write_mode(mode)\n\n\n'
p21
sS'author'
p22
S'AAP'
p23
s.